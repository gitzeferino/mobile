home.page.ts (L√≥gica do Componente)

import { Component } from '@angular/core';
import { IonicModule, ToastController } from '@ionic/angular';
import { CommonModule } from '@angular/common';

1. import { Component } from '@angular/core'; ‚Üí Importa o Component, que √© a base para criar componentes no Angular.  
2. import { IonicModule, ToastController } from '@ionic/angular'; ‚Üí Importa o m√≥dulo principal do Ionic e o ToastController, que permite exibir mensagens tempor√°rias na tela.  
3. import { CommonModule } from '@angular/common'; ‚Üí Importa funcionalidades b√°sicas do Angular, como diretivas e manipula√ß√£o de elementos HTML.  


@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
  standalone: true,
  imports: [IonicModule, CommonModule], 
})

4. @Component({...}) ‚Üí Define que este √© um componente Angular.  
5. selector: 'app-home' ‚Üí Define o nome da tag que representa este componente.  
6. templateUrl: 'home.page.html' ‚Üí Indica que o HTML deste componente est√° no arquivo home.page.html.  
7. styleUrls: ['home.page.scss'] ‚Üí Usa um arquivo CSS pr√≥prio para estilos do componente.  
8. standalone: true ‚Üí Indica que este componente √© independente e n√£o precisa estar em um m√≥dulo (NgModule).  
9. imports: [IonicModule, CommonModule] ‚Üí Importa os m√≥dulos necess√°rios para que o Ionic funcione corretamente.  


export class HomePage {
  constructor(private toastController: ToastController) {}

10. export class HomePage { ... } ‚Üí Define a classe HomePage, que cont√©m a l√≥gica do componente.  
11. constructor(private toastController: ToastController) {} ‚Üí O constructor recebe o ToastController, que ser√° usado para exibir mensagens (toasts).  


async mostrarMensagem(mensagem: string, cor: string) {
  const toast = await this.toastController.create({
    message: mensagem,
    duration: 2000,
    position: 'bottom',
    color: cor,
  });
  toast.present();
}

12. async mostrarMensagem(mensagem: string, cor: string) { ... } ‚Üí Define uma fun√ß√£o ass√≠ncrona que exibe um toast com uma mensagem personalizada e uma cor espec√≠fica.  
13. const toast = await this.toastController.create({...}) ‚Üí Cria um toast com as configura√ß√µes desejadas.  
14. message: mensagem ‚Üí O texto do toast ser√° o valor passado como argumento na fun√ß√£o.  
15. duration: 2000 ‚Üí O toast ser√° exibido por 2 segundos (2000 milissegundos).  
16. position: 'bottom' ‚Üí O toast aparecer√° na parte inferior da tela.  
17. color: cor ‚Üí Define a cor do toast com base no par√¢metro recebido.  
18. toast.present(); ‚Üí Exibe o toast na tela.  

home.page.html (Interface Gr√°fica)

<ion-content class="ion-padding">

19. <ion-content> ‚Üí Componente do Ionic que define o conte√∫do principal da p√°gina.  
20. class="ion-padding" ‚Üí Adiciona espa√ßamento interno para n√£o deixar os elementos grudados nas bordas.  

<ion-card>
  <ion-card-header>
    <ion-card-title>Agenda do Dia</ion-card-title>
    <ion-card-subtitle>Organize suas tarefas</ion-card-subtitle>
  </ion-card-header>

21. <ion-card> ‚Üí Um cart√£o do Ionic que agrupa informa√ß√µes relacionadas.  
22. <ion-card-header> ‚Üí Define um cabe√ßalho dentro do cart√£o.  
23. <ion-card-title> ‚Üí Define o t√≠tulo do cart√£o como "Agenda do Dia".  
24. <ion-card-subtitle> ‚Üí Define um subt√≠tulo para o cart√£o.  

<ion-card-content>
  üìå Marque as tarefas conclu√≠das ou desfa√ßa caso tenha clicado errado.
</ion-card-content>

25. <ion-card-content> ‚Üí √Årea de conte√∫do dentro do cart√£o, onde explicamos o funcionamento da interface.  

<ion-button expand="full" color="success" (click)="mostrarMensagem('Tarefa conclu√≠da! ‚úÖ', 'success')">
  Marcar como Feito
</ion-button>

26. <ion-button> ‚Üí Cria um bot√£o no Ionic.  
27. expand="full" ‚Üí Faz com que o bot√£o ocupe toda a largura dispon√≠vel.  
28. color="success" ‚Üí Define a cor do bot√£o como verde (sucesso).  
29. (click)="mostrarMensagem('Tarefa conclu√≠da! ‚úÖ', 'success')" ‚Üí Ao clicar, chama a fun√ß√£o mostrarMensagem, exibindo um toast verde com a mensagem "Tarefa conclu√≠da! ‚úÖ".  

<ion-button expand="full" color="danger" (click)="mostrarMensagem('A√ß√£o desfeita! ‚ùå', 'danger')">
  Desfazer
</ion-button>

30. expand="full" ‚Üí Faz com que este bot√£o tamb√©m ocupe toda a largura.  
31. color="danger" ‚Üí Define a cor como vermelha (erro).  
32. (click)="mostrarMensagem('A√ß√£o desfeita! ‚ùå', 'danger')" ‚Üí Ao clicar, exibe um toast vermelho com a mensagem "A√ß√£o desfeita! ‚ùå".  

